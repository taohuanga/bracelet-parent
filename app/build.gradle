apply plugin: 'com.android.application'

static String gitVersion() {
    def cmd = 'git rev-parse --short HEAD'
    def version = cmd.execute().text.trim()
    return version
}

android {
    //use legacy for android 6.0
    useLibrary 'org.apache.http.legacy'

    compileSdkVersion 28
    buildToolsVersion "25.0.3"

    defaultConfig {
        applicationId "os.bracelets.parents"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 2
        versionName "1.0.1"
        multiDexEnabled true
        buildConfigField "String", "GIT_VERSION", "\"" + gitVersion() + "\""
        ndk {
            //设置支持的SO库架构（开发者可以根据需要，选择一个或多个平台的so）
            abiFilters "armeabi", "armeabi-v7a", "x86"
        }
    }

    signingConfigs {
        config {
            keyAlias 'yftx'
            keyPassword 'yftx2017'
            storeFile file('../health2world.jks')
            storePassword 'yftx2017'
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        release {
            minifyEnabled false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    sourceSets {
        main {
            //jni库的调用会到资源文件夹下libs里面找so文件
            jniLibs.srcDirs = ['libs']
        }
    }

    repositories {
        flatDir {
            dirs 'libs' // aar目录
        }
    }

    //分包兼容低版本
    dexOptions {
        javaMaxHeapSize "1g"
        jumboMode = true
    }

    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }


}

// 自定义APK安装包名
android.applicationVariants.all {
    variant ->
        variant.outputs.each {
            output ->
                if (buildType.name.equals("release")) {
                    output.outputFile = new File(output.outputFile.parent,
                            "parents_release_" + gitVersion() + ".apk")
                }
        }
}

afterEvaluate {
    for (variant in android.applicationVariants) {
        def scope = variant.getVariantData().getScope()
        String mergeTaskName = scope.getMergeResourcesTask().name
        def mergeTask = tasks.getByName(mergeTaskName)
        mergeTask.doLast {
            copy {
                int i = 0
                from(android.sourceSets.main.res.srcDirs) {
                    include 'values/public.xml'
                    rename 'public.xml', (i == 0 ? "public.xml" : "public_${i}.xml")
                    i++
                }
                into(mergeTask.outputDir)
            }
        }
    }
}
dependencies {

    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:multidex:1.0.1'
    compile project(path: ':commonlib')
//    compile project(':easeui')
    //配合蓝牙库使用 勿删
    compile 'no.nordicsemi.android.support.v18:scanner:0.1.1'
    //    //蓝牙库
    //    compile 'com.clj.fastble:FastBleLib:2.3.4'
//    //高德定位 导航
//    compile 'com.amap.api:location:3.3.0'
//    //高德搜索
//    compile 'com.amap.api:search:5.0.0'
//    //高德3D地图
//    compile 'com.amap.api:3dmap:5.0.0'
//    //高德导航
//    compile 'com.amap.api:navi-3dmap:5.0.0'
}
